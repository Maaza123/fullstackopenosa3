{"version":3,"sources":["services/numberService.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","put","Numbers","persons","handleRemovePerson","filter","console","log","filteredPersons","person","name","toLowerCase","includes","map","key","number","RemoveButton","value","onClick","Input","onChange","Notification","message","className","ErrorPop","Filter","PersonForm","props","onSubmit","handleSubmit","newName","handleNameChange","newNumber","handleNumberChange","type","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","errorMessage","setErrorMessage","useEffect","numberService","then","response","data","popMessage","setTimeout","popError","event","preventDefault","target","newPerson","found","find","undefined","window","confirm","catch","error","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd7f3175.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst baseUrl = 'api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl);\r\n}\r\n\r\nconst create = (newObject) => {\r\n    return axios.post(baseUrl, newObject);\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`);\r\n}\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject);\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create, \r\n    deletePerson,\r\n    update\r\n}","import React, { useState, useEffect } from 'react'\nimport numberService from './services/numberService.js';\n\nconst Numbers = ({persons, handleRemovePerson, filter}) => {\n  console.log(persons);\n  const filteredPersons = persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()));\n  return(\n    <div>\n      {filteredPersons.map((person) => \n        <p key={person.id}>\n          {person.name} {person.number} <RemoveButton id={person.id} name={person.name} handleRemovePerson={handleRemovePerson} />\n        </p>)}\n    </div>\n  )\n}\nconst RemoveButton = ({id, handleRemovePerson, name}) => {\n  return(\n    <button value={id} name={name} onClick={handleRemovePerson}>delete</button>\n  )\n}\nconst Input = ({name, value, onChange}) => {\n  return(\n    <div>\n        {name}: <input value={value} onChange={onChange}/>\n  </div>\n  )\n}\n\nconst Notification = ({message}) => {\n  if(message ===null){\n    return null\n  }\n\n  return(\n    <div className='message'>\n      {message}\n    </div>\n  )\n}\n\nconst ErrorPop = ({message}) => {\n  if(message ===null){\n    return null\n  }\n\n  return(\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\nconst Filter = ({value, onChange}) => {\n  return(\n    <Input name='filter' value={value} onChange={onChange} />\n  )\n}\nconst PersonForm = (props) => {\n  return(\n    <form onSubmit={props.handleSubmit}>\n        <Input name='name' value={props.newName} onChange={props.handleNameChange} />\n        <Input name='number' value={props.newNumber} onChange={props.handleNumberChange} />\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('');\n  const [ filter, setFilter] = useState('');\n  const [message, setMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect (() =>{\n    numberService\n      .getAll()\n      .then(response => {\n        console.log(response.data);\n        setPersons(response.data);\n      });\n  }, [])  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n    const found = persons.find(person => person.name === newName);\n    if(found !== undefined){\n      if(window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)){\n        numberService\n          .update(found.id, newPerson)\n          .then(response => {\n            setPersons(persons.map(person => person.id !== found.id ? person: response.data));\n            popMessage(`Changed number for person ${newPerson.name}`);\n            setNewName('');\n            setNewNumber('');\n          })\n          .catch(error => {\n            popError(`Information of ${newPerson.name} has already been removed from the server`);\n            numberService\n              .getAll()\n              .then(response => {\n                setPersons(response.data);\n              })\n          })\n      }\n    }else{\n      numberService\n        .create(newPerson)\n        .then(response => {\n          setPersons(persons.concat(response.data));\n          popMessage(`Added new person ${newPerson.name}`);\n          setNewName('');\n          setNewNumber('');\n        })     \n    }\n  }\n\n  const handleNameChange = (event) => {\n    event.preventDefault();\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = (event) => {\n    event.preventDefault();\n    setNewNumber(event.target.value);\n  }\n\n  const handleFilterChange = (event) => {\n    event.preventDefault();\n    setFilter(event.target.value);\n  }\n  const popMessage = (message) => {\n    setMessage(message);\n    setTimeout(() => {\n      setMessage(null);\n    }, 5000)\n  }\n\n  const popError = (message) => {\n    setErrorMessage(message);\n    setTimeout(() => {\n      setErrorMessage(null);\n    }, 5000)\n  }\n  const handleRemovePerson = (event) => {\n    event.preventDefault();\n    const id = event.target.value;\n    const name = event.target.name;\n    console.log(event.target.value);\n    if(window.confirm(`Delete ${event.target.name}?`)){\n      console.log(id)\n      numberService\n        .deletePerson(id)\n        .then(response => {\n          console.log(`Persons: ${persons}`)\n          setPersons(persons.filter(person => person.id != id));\n          popMessage(`Removed person ${name}`);\n      });\n    }    \n  }\n\n  return (\n    <div>\n      <Notification message={message} />\n      <ErrorPop message={errorMessage} />\n      <h2>Phonebook</h2>\n        <Filter value={filter} onChange={handleFilterChange} />\n      <h2>Add a new</h2>\n        <PersonForm handleSubmit={handleSubmit} handleNumberChange={handleNumberChange} handleNameChange={handleNameChange}\n        newNumber={newNumber} newName={newName}/>\n      <h2>Numbers</h2>\n      <Numbers persons={persons} filter={filter} handleRemovePerson={handleRemovePerson}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}